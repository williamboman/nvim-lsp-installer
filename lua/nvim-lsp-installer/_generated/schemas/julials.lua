-- THIS FILE IS GENERATED. DO NOT EDIT MANUALLY.
-- stylua: ignore start
return {properties = {["julia.NumThreads"] = {default = vim.NIL,markdownDescription = "Number of threads to use for Julia processes. A value of `auto` works on Julia versions that allow for `--threads=auto`.",scope = "machine-overridable",type = { "integer", "string", "null" }},["julia.additionalArgs"] = {default = {},description = "Additional Julia arguments.",type = "array"},["julia.cellDelimiters"] = {default = { "^##(?!#)", "^#(\\s?)%%", "^#-" },description = "Cell delimiter regular expressions for Julia files.",type = "array"},["julia.completionmode"] = {default = "qualify",description = "Sets the mode for completions.",enum = { "exportedonly", "import", "qualify" },enumDescriptions = { "Show completions for the current namespace.", "Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will result in the automatic insertion of an explicit `using` statement.", "Show completions for the current namespace and unexported variables of `using`ed modules. Selection of an unexported variable will complete to a qualified variable name." },scope = "window",type = "string"},["julia.debuggerDefaultCompiled"] = {default = { "Base.", "-Base.!", "-Base.all", "-Base.all!", "-Base.any", "-Base.any!", "-Base.cd", "-Base.iterate", "-Base.collect", "-Base.collect_similar", "-Base._collect", "-Base.collect_to!", "-Base.collect_to_with_first!", "-Base.filter", "-Base.filter!", "-Base.foreach", "-Base.findall", "-Base.findfirst", "-Base.findlast", "-Base.findnext", "-Base.findprev", "-Base.Generator", "-Base.map", "-Base.map!", "-Base.maximum!", "-Base.minimum!", "-Base.mktemp", "-Base.mktempdir", "-Base.open", "-Base.prod!", "-Base.redirect_stderr", "-Base.redirect_stdin", "-Base.redirect_stdout", "-Base.reenable_sigint", "-Base.setindex!", "-Base.setprecision", "-Base.setrounding", "-Base.show", "-Base.sprint", "-Base.sum", "-Base.sum!", "-Base.task_local_storage", "-Base.timedwait", "-Base.withenv", "-Base.Broadcast", "Core", "Core.Compiler.", "Core.IR", "Core.Intrinsics", "DelimitedFiles", "Distributed", "LinearAlgebra.", "Serialization", "Statistics", "-Statistics.mean", "SparseArrays", "Mmap" },description = "Functions or modules that are set to compiled mode when setting the defaults.",scope = "window",type = "array"},["julia.deleteJuliaCovFiles"] = {default = true,description = "Delete Julia .cov files when running tests with coverage, leaving only a .lcov file behind.",scope = "window",type = "boolean"},["julia.editor"] = {default = "code",markdownDescription = "Command to open files from the REPL (via setting the `JULIA_EDITOR` environment variable).",type = "string"},["julia.enableCrashReporter"] = {default = vim.NIL,description = "Enable crash reports to be sent to the julia VS Code extension developers.",scope = "window",type = { "boolean", "null" }},["julia.enableTelemetry"] = {default = vim.NIL,description = "Enable usage data and errors to be sent to the julia VS Code extension developers.",scope = "window",type = { "boolean", "null" }},["julia.environmentPath"] = {default = vim.NIL,description = "Path to a julia environment. VS Code needs to be reloaded for changes to take effect.",scope = "window",type = { "string", "null" }},["julia.executablePath"] = {default = "",description = "Points to the julia executable.",scope = "machine-overridable",type = "string"},["julia.execution.codeInREPL"] = {default = false,description = "Print executed code in REPL and append it to the REPL history.",scope = "window",type = "boolean"},["julia.execution.inlineResultsForCellEvaluation"] = {default = false,markdownDescription = "Show separate inline results for all code blocks in a cell",scope = "window",type = "boolean"},["julia.execution.resultType"] = {default = "both",description = "Specifies how to show inline execution results",enum = { "REPL", "inline", "inline, errors in REPL", "both" },enumDescriptions = { "Shows inline execution results in REPL", "Shows inline execution results as inline bubbles", "Shows inline execution results in REPL and inline bubbles" },type = "string"},["julia.execution.saveOnEval"] = {default = false,markdownDescription = "Save file before execution",scope = "window",type = "boolean"},["julia.focusPlotNavigator"] = {default = false,description = "Whether to automatically show the plot navigator when plotting.",type = "boolean"},["julia.lint.call"] = {default = true,description = "This compares  call signatures against all known methods for the called function. Calls with too many or too few arguments, or unknown keyword parameters are highlighted.",type = "boolean"},["julia.lint.constif"] = {default = true,description = "Check for constant conditionals in if statements that result in branches never being reached..",type = "boolean"},["julia.lint.datadecl"] = {default = true,description = "Check variables used in type declarations are datatypes.",type = "boolean"},["julia.lint.disabledDirs"] = {default = { "docs", "test" },markdownDescription = "Specifies sub-directories in [a package directory](https://docs.julialang.org/en/v1/manual/code-loading/#Package-directories-1) where only basic linting is. This drastically lowers the chance for false positives.",type = "array"},["julia.lint.iter"] = {default = true,description = "Check iterator syntax of loops. Will identify, for example, attempts to iterate over single values.",type = "boolean"},["julia.lint.lazy"] = {default = true,description = "Check for deterministic lazy boolean operators.",type = "boolean"},["julia.lint.missingrefs"] = {default = "none",description = "Highlight unknown symbols. The `symbols` option will not mark unknown fields.",enum = { "none", "symbols", "all" },type = "string"},["julia.lint.modname"] = {default = true,description = "Check submodule names do not shadow their parent's name.",type = "boolean"},["julia.lint.nothingcomp"] = {default = true,description = "Check for use of `==` rather than `===` when comparing against `nothing`. ",type = "boolean"},["julia.lint.pirates"] = {default = true,description = "Check for type piracy - the overloading of external functions with methods specified for external datatypes. 'External' here refers to imported code.",type = "boolean"},["julia.lint.run"] = {default = true,description = "Run the linter on active files.",type = "boolean"},["julia.lint.typeparam"] = {default = true,description = "Check parameters declared in `where` statements or datatype declarations are used.",type = "boolean"},["julia.lint.useoffuncargs"] = {default = true,description = "Check that all declared arguments are used within the function body.",type = "boolean"},["julia.liveTestFile"] = {default = "test/runtests.jl",description = "A workspace relative path to a Julia file that contains the tests that should be run for live testing.",scope = "window",type = "string"},["julia.packageServer"] = {default = "",markdownDescription = "Julia package server. Set's the `JULIA_PKG_SERVER` environment variable *before* starting a Julia process. Leave this empty to use the systemwide default. Requires a restart of the Julia process.",scope = "machine-overridable",type = "string"},["julia.persistentSession.alwaysCopy"] = {default = false,description = "Always copy the command for connecting to an external REPL to the clipboard.",scope = "machine-overridable",type = "boolean"},["julia.persistentSession.enabled"] = {default = false,markdownDescription = "Experimental: Starts the interactive Julia session in a persistent `tmux` session. Note that `tmux` must be available in the shell defined below. If present the string `$[workspace]` will be replaced with the current file's workspace when the REPL is first opened.",scope = "machine-overridable",type = "boolean"},["julia.persistentSession.shell"] = {default = "/bin/sh",description = "Shell used to start the persistent session.",scope = "machine-overridable",type = "string"},["julia.persistentSession.shellExecutionArgument"] = {default = "-c",markdownDescription = "Argument to execute code in the configured shell, e.g. `-c` for sh-likes or `/c` for `cmd`.",scope = "machine-overridable",type = "string"},["julia.persistentSession.tmuxSessionName"] = {default = "julia_vscode",markdownDescription = "Name of the `tmux` session.",scope = "machine-overridable",type = "string"},["julia.persistentSession.warnOnKill"] = {default = true,description = "Warn when stopping a persistent session.",scope = "machine-overridable",type = "boolean"},["julia.plots.path"] = {description = "The output directory to save plots to",scope = "window",type = "string"},["julia.runtimeCompletions"] = {default = false,description = "Request runtime completions from the integrated REPL.",scope = "application",type = "boolean"},["julia.showRuntimeDiagnostics"] = {default = true,markdownDescription = "Enable display of runtime diagnostics. These diagnostics are provided by packages that overload a `show` method for the `application/vnd.julia-vscode.diagnostics` MIME type.",type = "boolean"},["julia.symbolCacheDownload"] = {default = vim.NIL,description = "Download symbol server cache files from GitHub.",scope = "application",type = { "boolean", "null" }},["julia.symbolserverUpstream"] = {default = "https://www.julia-vscode.org/symbolcache",description = "Symbol server cache download URL.",scope = "application",type = "string"},["julia.trace.server"] = {default = "off",description = "Traces the communication between VS Code and the language server.",enum = { "off", "messages", "verbose" },scope = "window",type = "string"},["julia.useCustomSysimage"] = {default = false,description = "Use an existing custom sysimage when starting the REPL",scope = "application",type = "boolean"},["julia.usePlotPane"] = {default = true,description = "Display plots within VS Code. Might require a restart of the Julia process.",type = "boolean"},["julia.useProgressFrontend"] = {default = true,markdownDescription = "Display [progress bars](https://github.com/JunoLab/ProgressLogging.jl) within VS Code.",type = "boolean"},["julia.useRevise"] = {default = true,description = "Load Revise.jl on startup of the REPL.",type = "boolean"},["julia.workspace.showModules"] = {default = true,description = "Show top-level modules in the workspace.",scope = "application",type = "boolean"}},title = "Julia",type = "object"}