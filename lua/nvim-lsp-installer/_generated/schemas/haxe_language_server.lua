-- THIS FILE IS GENERATED. DO NOT EDIT MANUALLY.
-- stylua: ignore start
return {properties = {["haxe.buildCompletionCache"] = {default = true,markdownDescription = "Speed up completion by building the project once on startup to initialize the cache.",type = "boolean"},["haxe.codeGeneration"] = {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Options for code generation",properties = {functions = {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Options for generating functions",properties = {anonymous = {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Options for generating anonymous functions",properties = {argumentTypeHints = {default = false,markdownDescription = "Whether to include type hints for arguments",type = "boolean"},explicitNull = {default = false,markdownDescription = "Whether to wrap types in `Null<T>` even if it can be omitted (for optional arguments with `?`)",type = "boolean"},returnTypeHint = {default = "never",enum = { "always", "never", "non-void" },markdownDescription = "In which case to include return type hints",type = "string"},useArrowSyntax = {default = true,markdownDescription = "Whether to use arrow function syntax (Haxe 4+)",type = "boolean"}},type = "object"},field = {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Options for generating field-level functions",properties = {argumentTypeHints = {default = true,markdownDescription = "Whether to include type hints for arguments",type = "boolean"},explicitNull = {default = false,markdownDescription = "Whether to wrap types in `Null<T>` even if it can be omitted (for optional arguments with `?`)",type = "boolean"},explicitPrivate = {default = false,markdownDescription = "Whether to include the private visibility modifier even if it can be omitted",type = "boolean"},explicitPublic = {default = false,markdownDescription = "Whether to include the public visibility modifier even if it can be omitted",type = "boolean"},placeOpenBraceOnNewLine = {default = false,markdownDescription = "Whether to place `{` in a new line",type = "boolean"},returnTypeHint = {default = "non-void",enum = { "always", "never", "non-void" },markdownDescription = "In which case to include return type hints",type = "string"}},type = "object"}},type = "object"},imports = {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Options for generating imports",properties = {enableAutoImports = {default = true,markdownDescription = "Whether to insert an import automatically when selecting a not-yet-imported type from completion. If `false`, the fully qualified name is inserted instead.",type = "boolean"},style = {default = "type",enum = { "type", "module" },markdownDescription = "How to deal with module subtypes when generating imports.",markdownEnumDescriptions = { "Import only the specific sub-type (`import pack.Foo.Type`).", "Import the entire module the sub-type lives in (`import pack.Foo`)." },type = "string"}},type = "object"},switch = {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Options for generating switch expressions",properties = {parentheses = {default = false,markdownDescription = "Whether to wrap the switch subject in parentheses",type = "boolean"}},type = "object"}},type = "object"},["haxe.configurations"] = {default = {},items = {markdownDescription = "Command-line arguments passed to the Haxe completion server. Can contain HXML files. Relative paths will be resolved against workspace root.",oneOf = { {items = {type = "string"},type = "array"}, {additionalProperties = false,properties = {args = {items = {type = "string"},markdownDescription = "The Haxe command-line arguments.",type = "array"},label = {markdownDescription = "The label to use for displaying this configuration in the UI.",type = "string"}},type = "object"} }},markdownDescription = "Array of switchable configurations for the Haxe completion server. Each configuration is an array of command-line arguments, see item documentation for more details.",type = "array"},["haxe.diagnosticsPathFilter"] = {default = "${workspaceRoot}",markdownDescription = 'A regex that paths of source files have to match to be included in diagnostics. Defaults to `"${workspaceRoot}"` so only files within your workspace are included. You can use `"${haxelibPath}/<library-name>"` to only show results for a specific haxelib. Use `".*?"` to see all results, including haxelibs.',type = "string"},["haxe.displayConfigurations"] = {default = {},deprecationMessage = 'Use "haxe.configurations" instead',type = "array"},["haxe.displayPort"] = {default = "auto",markdownDescription = 'Integer value for the port to open on the display server, or `"auto"`. Can be used to `--connect` Haxe build commands.',oneOf = { {type = "integer"}, {enum = { "auto" },type = "string"} }},["haxe.displayServer"] = {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Haxe completion server configuration",properties = {arguments = {default = {},items = {type = "string"},markdownDescription = 'Array of arguments passed to the Haxe completion server at start. Can be used for debugging completion server issues, for example by adding the `"-v"` argument.',type = "array"},print = {additionalProperties = false,default = {completion = false,reusing = false},markdownDescription = "Which debug output to print to the Haxe output channel. With `-v`, all flags default to `true`, and without it to `false`. Setting a flag here overrides the default. Only works with Haxe 4.0.0-preview.4 or newer.",properties = {addedDirectory = {type = "boolean"},arguments = {type = "boolean"},cachedModules = {type = "boolean"},changedDirectories = {type = "boolean"},completion = {type = "boolean"},defines = {type = "boolean"},displayPosition = {type = "boolean"},foundDirectories = {type = "boolean"},message = {type = "boolean"},modulePathChanged = {type = "boolean"},newContext = {type = "boolean"},notCached = {type = "boolean"},parsed = {type = "boolean"},removedDirectory = {type = "boolean"},reusing = {type = "boolean"},signature = {type = "boolean"},skippingDep = {type = "boolean"},socketMessage = {type = "boolean"},stats = {type = "boolean"},uncaughtError = {type = "boolean"},unchangedContent = {type = "boolean"}},type = "object"},useSocket = {default = true,markdownDescription = "If possible, use a socket for communication with Haxe rather than stdio.",type = "boolean"}},type = "object"},["haxe.enableBraceBodyWrapping"] = {default = false,markdownDescription = "Add closing brace at the end of one-line `if/for/while` body expressions",type = "boolean"},["haxe.enableCodeLens"] = {default = false,markdownDescription = "Enable code lens to show some statistics",type = "boolean"},["haxe.enableCompilationServer"] = {default = true,markdownDescription = "Use the extension's Haxe server to compile auto-generated tasks. Requires `\"haxe.displayPort\"` to be set.",type = "boolean"},["haxe.enableCompletionCacheWarning"] = {default = true,markdownDescription = "Whether a warning popup should be shown if the completion cache build has failed.",type = "boolean"},["haxe.enableDiagnostics"] = {default = true,markdownDescription = "Enable automatic diagnostics of Haxe files, run automatically on open and save.",type = "boolean"},["haxe.enableExtendedIndentation"] = {default = false,markdownDescription = "Align new line brackets with Allman style. Can have typing overhead and is incompatible with the Vim extension.",type = "boolean"},["haxe.enableMethodsView"] = {default = false,deprecationMessage = 'Use "haxe.enableServerView" instead',type = "boolean"},["haxe.enableServerView"] = {default = false,markdownDescription = 'Enable the "Haxe Server" view container for performance and cache debugging.',type = "boolean"},["haxe.enableSignatureHelpDocumentation"] = {default = true,markdownDescription = "Whether signature help should include documentation or not.",type = "boolean"},["haxe.exclude"] = {default = { "zpp_nape" },markdownDescription = "A list of dot paths (packages, modules, types) to exclude from classpath parsing, completion and workspace symbols. Can be useful to improve performance.",type = "array"},["haxe.executable"] = {default = "auto",markdownDescription = "Path to the Haxe executable or an object containing a Haxe executable configuration",oneOf = { {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxe executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxe executable",type = "string"}, {additionalProperties = false,markdownDescription = "Haxe executable configuration",properties = {env = {additionalProperties = {type = "string"},default = vim.empty_dict(),markdownDescription = "Additional environment variables used for running Haxe executable",type = "object"},linux = {default = "auto",markdownDescription = "Linux-specific path to the Haxe executable or an object containing a Haxe executable configuration",oneOf = { {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxe executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxe executable",type = "string"}, {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Overrides for Linux",properties = {env = {additionalProperties = {type = "string"},default = vim.empty_dict(),markdownDescription = "Additional environment variables used for running Haxe executable",type = "object"},path = {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxe executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxe executable",type = "string"}},type = "object"} }},osx = {default = "auto",markdownDescription = "Mac-specific path to the Haxe executable or an object containing a Haxe executable configuration",oneOf = { {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxe executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxe executable",type = "string"}, {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Overrides for Mac",properties = {env = {additionalProperties = {type = "string"},default = vim.empty_dict(),markdownDescription = "Additional environment variables used for running Haxe executable",type = "object"},path = {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxe executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxe executable",type = "string"}},type = "object"} }},path = {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxe executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxe executable",type = "string"},windows = {default = "auto",markdownDescription = "Windows-specific path to the Haxe executable or an object containing a Haxe executable configuration",oneOf = { {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxe executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxe executable",type = "string"}, {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Overrides for Windows",properties = {env = {additionalProperties = {type = "string"},default = vim.empty_dict(),markdownDescription = "Additional environment variables used for running Haxe executable",type = "object"},path = {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxe executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxe executable",type = "string"}},type = "object"} }}},type = "object"} },scope = "resource"},["haxe.maxCompletionItems"] = {default = 1000,markdownDescription = "Upper limit for the number of completion items that can be shown at once.",type = "integer"},["haxe.postfixCompletion"] = {additionalProperties = false,default = vim.empty_dict(),markdownDescription = "Options for postfix completion",properties = {level = {default = "full",enum = { "full", "filtered", "off" },markdownDescription = "Which kinds of postfix completions to include",markdownEnumDescriptions = { "Show all postfix completion items.", "Only show items that apply to specific types like `for` and `switch`.", "Disable postfix completion." },type = "string"}},type = "object"},["haxe.renameSourceFolders"] = {default = { "src", "source", "Source", "test", "tests" },deprecationMessage = "Folders to look for renamable identifiers. Rename will not see or touch files outside of those folders.",type = "array"},["haxe.taskPresentation"] = {additionalProperties = false,default = {clear = false,echo = true,focus = false,panel = "shared",reveal = "always",showReuseMessage = true},markdownDescription = "Configures which presentation options to use for generated tasks by default (see `presentation` in `tasks.json`).",properties = {clear = {default = false,markdownDescription = "Controls whether the terminal is cleared before executing the task.",type = "boolean"},echo = {default = true,markdownDescription = "Controls whether the executed command is echoed to the panel. Default is `true`.",type = "boolean"},focus = {default = false,markdownDescription = "Controls whether the panel takes focus. Default is `false`. If set to `true` the panel is revealed as well.",type = "boolean"},panel = {default = "shared",enum = { "shared", "dedicated", "new" },markdownDescription = "Controls if the panel is shared between tasks, dedicated to this task or a new one is created on every run.",type = "string"},reveal = {default = "always",enum = { "always", "silent", "never" },markdownDescription = 'Controls whether the panel running the task is revealed or not. Default is `"always"`.',markdownEnumDescriptions = { "Always reveals the terminal when this task is executed.", "Only reveals the terminal if no problem matcher is associated with the task and an errors occurs executing it.", "Never reveals the terminal when this task is executed." },type = "string"},showReuseMessage = {default = true,markdownDescription = "Controls whether to show the `Terminal will be reused by tasks, press any key to close it` message.",type = "boolean"}},type = "object"},["haxe.useLegacyCompletion"] = {default = false,markdownDescription = "Whether to revert to a Haxe 3 style completion where only toplevel packages and imported types are shown (effectively making it incompatible with auto-imports). *Note:* this setting has no effect with Haxe versions earlier than 4.0.0-rc.4.",type = "boolean"},["haxelib.executable"] = {anyOf = { {enum = { "auto" },markdownEnumDescriptions = { "Auto-detect the Haxelib executable." },type = "string"}, {type = "string"} },default = "auto",markdownDescription = "Path to the Haxelib executable",scope = "resource",type = "string"}},title = "Haxe"}