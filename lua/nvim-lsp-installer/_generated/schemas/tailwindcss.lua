-- THIS FILE IS GENERATED. DO NOT EDIT MANUALLY.
-- stylua: ignore start
return {properties = {["tailwindCSS.classAttributes"] = {default = { "class", "className", "ngClass" },items = {type = "string"},markdownDescription = "The HTML attributes for which to provide class completions, hover previews, linting etc.",type = "array"},["tailwindCSS.codeActions"] = {default = true,markdownDescription = "Enable code actions.",scope = "language-overridable",type = "boolean"},["tailwindCSS.colorDecorators"] = {default = true,markdownDescription = "Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.",scope = "language-overridable",type = "boolean"},["tailwindCSS.emmetCompletions"] = {default = false,markdownDescription = "Enable class name completions when using Emmet-style syntax, for example `div.bg-red-500.uppercase`",type = "boolean"},["tailwindCSS.experimental.classRegex"] = {scope = "language-overridable",type = "array"},["tailwindCSS.experimental.configFile"] = {default = vim.NIL,markdownDescription = "Manually specify the Tailwind config file or files that should be read to provide IntelliSense features. Can either be a single string value, or an object where each key is a config file path and each value is a glob or array of globs representing the set of files that the config file applies to.",type = { "null", "string", "object" }},["tailwindCSS.files.exclude"] = {default = { "**/.git/**", "**/node_modules/**", "**/.hg/**" },items = {type = "string"},markdownDescription = "Configure glob patterns to exclude from all IntelliSense features. Inherits all glob patterns from the `#files.exclude#` setting.",type = "array"},["tailwindCSS.hovers"] = {default = true,markdownDescription = "Enable hovers.",scope = "language-overridable",type = "boolean"},["tailwindCSS.includeLanguages"] = {additionalProperties = {type = "string"},default = vim.empty_dict(),markdownDescription = 'Enable features in languages that are not supported by default. Add a mapping here between the new language and an already supported language.\n E.g.: `{"plaintext": "html"}`',type = "object"},["tailwindCSS.inspectPort"] = {default = vim.NIL,markdownDescription = "Enable the Node.js inspector agent for the language server and listen on the specified port.",type = { "number", "null" }},["tailwindCSS.lint.cssConflict"] = {default = "warning",enum = { "ignore", "warning", "error" },markdownDescription = "Class names on the same HTML element which apply the same CSS property or properties",scope = "language-overridable",type = "string"},["tailwindCSS.lint.invalidApply"] = {default = "error",enum = { "ignore", "warning", "error" },markdownDescription = "Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)",scope = "language-overridable",type = "string"},["tailwindCSS.lint.invalidConfigPath"] = {default = "error",enum = { "ignore", "warning", "error" },markdownDescription = "Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)",scope = "language-overridable",type = "string"},["tailwindCSS.lint.invalidScreen"] = {default = "error",enum = { "ignore", "warning", "error" },markdownDescription = "Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)",scope = "language-overridable",type = "string"},["tailwindCSS.lint.invalidTailwindDirective"] = {default = "error",enum = { "ignore", "warning", "error" },markdownDescription = "Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)",scope = "language-overridable",type = "string"},["tailwindCSS.lint.invalidVariant"] = {default = "error",enum = { "ignore", "warning", "error" },markdownDescription = "Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)",scope = "language-overridable",type = "string"},["tailwindCSS.lint.recommendedVariantOrder"] = {default = "warning",enum = { "ignore", "warning", "error" },markdownDescription = "Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)",scope = "language-overridable",type = "string"},["tailwindCSS.rootFontSize"] = {default = 16,markdownDescription = "Root font size in pixels. Used to convert `rem` CSS values to their `px` equivalents. See `#tailwindCSS.showPixelEquivalents#`.",type = "number"},["tailwindCSS.showPixelEquivalents"] = {default = true,markdownDescription = "Show `px` equivalents for `rem` CSS values.",type = "boolean"},["tailwindCSS.suggestions"] = {default = true,markdownDescription = "Enable autocomplete suggestions.",scope = "language-overridable",type = "boolean"},["tailwindCSS.validate"] = {default = true,markdownDescription = "Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings",scope = "language-overridable",type = "boolean"}},title = "Tailwind CSS IntelliSense"}